<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="bun test" tests="388" assertions="1259" failures="0" skipped="0" time="33.692099">
  <testsuite name="test/tools/handlers.test.ts" tests="24" assertions="108" failures="0" skipped="0" time="0.017" hostname="taxitopArm23.local">
    <testcase name="should create a project successfully" classname="create_project &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.00153" file="test/tools/handlers.test.ts" assertions="8" />
    <testcase name="should handle validation errors" classname="create_project &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.000254" file="test/tools/handlers.test.ts" assertions="2" />
    <testcase name="should list projects" classname="list_projects &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.000974" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should handle filtering by status" classname="list_projects &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.000107" file="test/tools/handlers.test.ts" assertions="3" />
    <testcase name="should get a project by ID" classname="get_project &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.000608" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should handle non-existent project" classname="get_project &amp;gt; Project Management Tools &amp;gt; ToolHandlers" time="0.000075" file="test/tools/handlers.test.ts" assertions="3" />
    <testcase name="should create a task type successfully" classname="create_task_type &amp;gt; Task Type Management Tools &amp;gt; ToolHandlers" time="0.00254" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should list task types for a project" classname="list_task_types &amp;gt; Task Type Management Tools &amp;gt; ToolHandlers" time="0.001762" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should create a task successfully" classname="create_task &amp;gt; Task Management Tools &amp;gt; ToolHandlers" time="0.003023" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should list tasks for a project" classname="list_tasks &amp;gt; Task Management Tools &amp;gt; ToolHandlers" time="0.002179" file="test/tools/handlers.test.ts" assertions="7" />
    <testcase name="should get a task by ID" classname="get_task &amp;gt; Task Management Tools &amp;gt; ToolHandlers" time="0.001675" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should handle non-existent task" classname="get_task &amp;gt; Task Management Tools &amp;gt; ToolHandlers" time="0.000127" file="test/tools/handlers.test.ts" assertions="3" />
    <testcase name="should list active agents for a project" classname="list_active_agents &amp;gt; Agent Management Tools &amp;gt; ToolHandlers" time="0.000717" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should get next task for an agent" classname="get_next_task &amp;gt; Task Execution Tools &amp;gt; ToolHandlers" time="0.001366" file="test/tools/handlers.test.ts" assertions="7" />
    <testcase name="should return error when no tasks available" classname="get_next_task &amp;gt; Task Execution Tools &amp;gt; ToolHandlers" time="0.001662" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should complete a task" classname="complete_task &amp;gt; Task Execution Tools &amp;gt; ToolHandlers" time="0.002036" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should fail a task" classname="fail_task &amp;gt; Task Execution Tools &amp;gt; ToolHandlers" time="0.002288" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should get project statistics" classname="get_project_stats &amp;gt; Status and Monitoring Tools &amp;gt; ToolHandlers" time="0.000491" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should return system health status" classname="health_check &amp;gt; Status and Monitoring Tools &amp;gt; ToolHandlers" time="0.000097" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should extend a task lease" classname="extend_task_lease &amp;gt; Lease Management &amp;gt; Status and Monitoring Tools &amp;gt; ToolHandlers" time="0.001222" file="test/tools/handlers.test.ts" assertions="4" />
    <testcase name="should get lease statistics for a project" classname="get_lease_stats &amp;gt; Lease Management &amp;gt; Status and Monitoring Tools &amp;gt; ToolHandlers" time="0.000488" file="test/tools/handlers.test.ts" assertions="7" />
    <testcase name="should cleanup expired leases for a project" classname="cleanup_expired_leases &amp;gt; Lease Management &amp;gt; Status and Monitoring Tools &amp;gt; ToolHandlers" time="0.000385" file="test/tools/handlers.test.ts" assertions="5" />
    <testcase name="should handle unknown tool names" classname="Error Handling &amp;gt; ToolHandlers" time="0.000034" file="test/tools/handlers.test.ts" assertions="2" />
    <testcase name="should handle validation errors gracefully" classname="Error Handling &amp;gt; ToolHandlers" time="0.000312" file="test/tools/handlers.test.ts" assertions="2" />
  </testsuite>
  <testsuite name="test/config/index.test.ts" tests="16" assertions="37" failures="0" skipped="0" time="0" hostname="taxitopArm23.local">
    <testcase name="should load configuration with default values" classname="loadConfig &amp;gt; Configuration" time="0.000808" file="test/config/index.test.ts" assertions="7" />
    <testcase name="should load configuration from environment variables" classname="loadConfig &amp;gt; Configuration" time="0.000391" file="test/config/index.test.ts" assertions="9" />
    <testcase name="should handle Redis configuration" classname="loadConfig &amp;gt; Configuration" time="0.000172" file="test/config/index.test.ts" assertions="4" />
    <testcase name="should handle file storage data directory" classname="loadConfig &amp;gt; Configuration" time="0.000088" file="test/config/index.test.ts" assertions="2" />
    <testcase name="should parse numeric values correctly" classname="loadConfig &amp;gt; Configuration" time="0.000042" file="test/config/index.test.ts" assertions="2" />
    <testcase name="should parse boolean values correctly" classname="loadConfig &amp;gt; Configuration" time="0.000035" file="test/config/index.test.ts" assertions="2" />
    <testcase name="should handle boolean values with different cases" classname="loadConfig &amp;gt; Configuration" time="0.000077" file="test/config/index.test.ts" assertions="2" />
    <testcase name="should validate valid configuration" classname="configSchema &amp;gt; Configuration" time="0.000124" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should reject invalid storage provider" classname="configSchema &amp;gt; Configuration" time="0.000122" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should reject invalid log level" classname="configSchema &amp;gt; Configuration" time="0.000063" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should reject invalid port numbers" classname="configSchema &amp;gt; Configuration" time="0.000043" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should reject invalid API key length" classname="configSchema &amp;gt; Configuration" time="0.000038" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should require connection string for MongoDB" classname="configSchema &amp;gt; Configuration" time="0.000036" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should require connection string for Redis" classname="configSchema &amp;gt; Configuration" time="0.000032" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should accept valid MongoDB configuration" classname="configSchema &amp;gt; Configuration" time="0.000084" file="test/config/index.test.ts" assertions="1" />
    <testcase name="should accept valid Redis configuration" classname="configSchema &amp;gt; Configuration" time="0.000042" file="test/config/index.test.ts" assertions="1" />
  </testsuite>
  <testsuite name="test/integration/mcp-comprehensive.test.ts" tests="29" assertions="258" failures="0" skipped="0" time="0.024" hostname="taxitopArm23.local">
    <testcase name="should have all expected tools registered" classname="Tool Registration and Structure &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000171" file="test/integration/mcp-comprehensive.test.ts" assertions="23" />
    <testcase name="should have properly structured tool definitions" classname="Tool Registration and Structure &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000016" file="test/integration/mcp-comprehensive.test.ts" assertions="105" />
    <testcase name="should create project successfully" classname="Project Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000604" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should list projects" classname="Project Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000666" file="test/integration/mcp-comprehensive.test.ts" assertions="6" />
    <testcase name="should get project by ID" classname="Project Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000379" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should update project properties" classname="Project Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001534" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should get project statistics" classname="Project Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000814" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should create task type with template" classname="Task Type Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001257" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should list task types for project" classname="Task Type Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001276" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should get task type by ID" classname="Task Type Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001085" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should create single task" classname="Task Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001854" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should create bulk tasks" classname="Task Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.002007" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should list tasks for project" classname="Task Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001489" file="test/integration/mcp-comprehensive.test.ts" assertions="6" />
    <testcase name="should get task by ID" classname="Task Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001642" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should get next task from queue" classname="Agent Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000896" file="test/integration/mcp-comprehensive.test.ts" assertions="6" />
    <testcase name="should return error when no tasks available" classname="Agent Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.002694" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should list active agents when agents have tasks" classname="Agent Management Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001371" file="test/integration/mcp-comprehensive.test.ts" assertions="6" />
    <testcase name="should get next task and assign to agent" classname="Task Execution Workflow &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001051" file="test/integration/mcp-comprehensive.test.ts" assertions="7" />
    <testcase name="should complete assigned task" classname="Task Execution Workflow &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.002047" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should fail task with error" classname="Task Execution Workflow &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001847" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should extend task lease" classname="Lease Management &amp;gt; System and Monitoring Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000735" file="test/integration/mcp-comprehensive.test.ts" assertions="4" />
    <testcase name="should get lease statistics" classname="Lease Management &amp;gt; System and Monitoring Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000217" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should cleanup expired leases" classname="Lease Management &amp;gt; System and Monitoring Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000307" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should perform health check" classname="System and Monitoring Tools &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000108" file="test/integration/mcp-comprehensive.test.ts" assertions="5" />
    <testcase name="should handle unknown tool names" classname="Error Handling and Validation &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000061" file="test/integration/mcp-comprehensive.test.ts" assertions="2" />
    <testcase name="should validate required parameters" classname="Error Handling and Validation &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000245" file="test/integration/mcp-comprehensive.test.ts" assertions="2" />
    <testcase name="should handle non-existent project references" classname="Error Handling and Validation &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.000068" file="test/integration/mcp-comprehensive.test.ts" assertions="3" />
    <testcase name="should handle malformed JSON in string parameters" classname="Error Handling and Validation &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.001576" file="test/integration/mcp-comprehensive.test.ts" assertions="3" />
    <testcase name="should execute complete project lifecycle" classname="Complete End-to-End Workflow &amp;gt; Storage Provider: FileStorage &amp;gt; MCP Integration - Comprehensive Tool Testing" time="0.007055" file="test/integration/mcp-comprehensive.test.ts" assertions="15" />
  </testsuite>
  <testsuite name="test/integration/storage-provider.test.ts" tests="8" assertions="73" failures="0" skipped="0" time="0.088" hostname="taxitopArm23.local">
    <testcase name="should support complete task lifecycle through all services" classname="End-to-End Workflow &amp;gt; Storage Provider Integration" time="0.009544" file="test/integration/storage-provider.test.ts" assertions="27" />
    <testcase name="should handle lease expiration and cleanup" classname="End-to-End Workflow &amp;gt; Storage Provider Integration" time="0.004932" file="test/integration/storage-provider.test.ts" assertions="9" />
    <testcase name="should handle duplicate task detection" classname="End-to-End Workflow &amp;gt; Storage Provider Integration" time="0.005936" file="test/integration/storage-provider.test.ts" assertions="2" />
    <testcase name="should handle batch operations" classname="End-to-End Workflow &amp;gt; Storage Provider Integration" time="0.012624" file="test/integration/storage-provider.test.ts" assertions="13" />
    <testcase name="should maintain data consistency across services" classname="Service Integration &amp;gt; Storage Provider Integration" time="0.004838" file="test/integration/storage-provider.test.ts" assertions="9" />
    <testcase name="should handle concurrent agent operations" classname="Service Integration &amp;gt; Storage Provider Integration" time="0.051848" file="test/integration/storage-provider.test.ts" assertions="7" />
    <testcase name="should handle service errors gracefully" classname="Error Handling &amp;gt; Storage Provider Integration" time="0.002027" file="test/integration/storage-provider.test.ts" assertions="3" />
    <testcase name="should handle validation errors across services" classname="Error Handling &amp;gt; Storage Provider Integration" time="0.001443" file="test/integration/storage-provider.test.ts" assertions="3" />
  </testsuite>
  <testsuite name="test/utils/index.test.ts" tests="31" assertions="50" failures="0" skipped="0" time="0" hostname="taxitopArm23.local">
    <testcase name="should generate a key of default length (32)" classname="generateApiKey &amp;gt; Utility Functions" time="0.000099" file="test/utils/index.test.ts" assertions="2" />
    <testcase name="should generate a key of specified length" classname="generateApiKey &amp;gt; Utility Functions" time="0.000006" file="test/utils/index.test.ts" assertions="2" />
    <testcase name="should generate different keys on successive calls" classname="generateApiKey &amp;gt; Utility Functions" time="0.000023" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should hash an API key consistently" classname="hashApiKey &amp;gt; Utility Functions" time="0.000038" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should produce different hashes for different keys" classname="hashApiKey &amp;gt; Utility Functions" time="0" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should return a non-empty hash" classname="hashApiKey &amp;gt; Utility Functions" time="0.000057" file="test/utils/index.test.ts" assertions="2" />
    <testcase name="should generate a correlation ID" classname="generateCorrelationId &amp;gt; Utility Functions" time="0.00005" file="test/utils/index.test.ts" assertions="2" />
    <testcase name="should generate different IDs on successive calls" classname="generateCorrelationId &amp;gt; Utility Functions" time="0.000004" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should replace simple variables" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0.000032" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should replace multiple variables" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0.000022" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should replace the same variable multiple times" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0.000019" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle templates with no variables" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0.000005" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle empty template" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle special characters in replacement" classname="replaceTemplateVariables &amp;gt; Utility Functions" time="0.000012" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should extract simple variables" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000015" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should extract multiple variables" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000009" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should extract duplicate variables only once" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000013" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle templates with no variables" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000015" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle empty template" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000004" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should handle variables with underscores and numbers" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000015" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should ignore malformed variables" classname="extractTemplateVariables &amp;gt; Utility Functions" time="0.000005" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should validate when all variables are provided" classname="validateTemplateVariables &amp;gt; Utility Functions" time="0.000013" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should identify missing variables" classname="validateTemplateVariables &amp;gt; Utility Functions" time="0" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should identify multiple missing variables" classname="validateTemplateVariables &amp;gt; Utility Functions" time="0.000003" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should be valid when no variables are needed" classname="validateTemplateVariables &amp;gt; Utility Functions" time="0.000007" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should be valid when extra variables are provided" classname="validateTemplateVariables &amp;gt; Utility Functions" time="0.000008" file="test/utils/index.test.ts" assertions="1" />
    <testcase name="should clone primitive values" classname="deepClone &amp;gt; Utility Functions" time="0.000048" file="test/utils/index.test.ts" assertions="5" />
    <testcase name="should clone dates" classname="deepClone &amp;gt; Utility Functions" time="0.000018" file="test/utils/index.test.ts" assertions="2" />
    <testcase name="should clone arrays" classname="deepClone &amp;gt; Utility Functions" time="0.000031" file="test/utils/index.test.ts" assertions="3" />
    <testcase name="should clone objects" classname="deepClone &amp;gt; Utility Functions" time="0.00002" file="test/utils/index.test.ts" assertions="3" />
    <testcase name="should clone nested structures" classname="deepClone &amp;gt; Utility Functions" time="0.000026" file="test/utils/index.test.ts" assertions="7" />
  </testsuite>
  <testsuite name="test/utils/validation.test.ts" tests="34" assertions="66" failures="0" skipped="0" time="0" hostname="taxitopArm23.local">
    <testcase name="should validate valid data" classname="validate function &amp;gt; Validation" time="0" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should throw validation error for invalid data" classname="validate function &amp;gt; Validation" time="0.000348" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should provide detailed error information" classname="validate function &amp;gt; Validation" time="0.00007" file="test/utils/validation.test.ts" assertions="3" />
    <testcase name="should identify validation errors" classname="isValidationError &amp;gt; Validation" time="0.000044" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should return false for non-validation errors" classname="isValidationError &amp;gt; Validation" time="0.000012" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid project names" classname="projectNameSchema &amp;gt; Validation" time="0.000065" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should reject invalid project names" classname="projectNameSchema &amp;gt; Validation" time="0.000049" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should accept valid agent names" classname="agentNameSchema &amp;gt; Validation" time="0.000034" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should reject invalid agent names" classname="agentNameSchema &amp;gt; Validation" time="0.000046" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should accept valid task type names" classname="taskTypeNameSchema &amp;gt; Validation" time="0.000026" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should reject invalid task type names" classname="taskTypeNameSchema &amp;gt; Validation" time="0.000045" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should accept valid UUIDs" classname="uuidSchema &amp;gt; Validation" time="0.000035" file="test/utils/validation.test.ts" assertions="3" />
    <testcase name="should reject invalid UUIDs" classname="uuidSchema &amp;gt; Validation" time="0.000038" file="test/utils/validation.test.ts" assertions="4" />
    <testcase name="should accept valid variables" classname="variablesSchema &amp;gt; Validation" time="0.000108" file="test/utils/validation.test.ts" assertions="3" />
    <testcase name="should reject invalid variable names" classname="variablesSchema &amp;gt; Validation" time="0.00004" file="test/utils/validation.test.ts" assertions="3" />
    <testcase name="should reject too many variables" classname="variablesSchema &amp;gt; Validation" time="0.000037" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid instructions" classname="instructionsSchema &amp;gt; Validation" time="0.000266" file="test/utils/validation.test.ts" assertions="3" />
    <testcase name="should reject invalid instructions" classname="instructionsSchema &amp;gt; Validation" time="0.000056" file="test/utils/validation.test.ts" assertions="2" />
    <testcase name="should accept valid project creation data" classname="createProjectSchema &amp;gt; Validation" time="0.000039" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept project without config" classname="createProjectSchema &amp;gt; Validation" time="0.000025" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject invalid project data" classname="createProjectSchema &amp;gt; Validation" time="0.000044" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid task type creation data" classname="createTaskTypeSchema &amp;gt; Validation" time="0.000062" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept minimal task type data with template" classname="createTaskTypeSchema &amp;gt; Validation" time="0.000023" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject task type data without template" classname="createTaskTypeSchema &amp;gt; Validation" time="0.000033" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject invalid task type data" classname="createTaskTypeSchema &amp;gt; Validation" time="0.000043" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid task creation data" classname="createTaskSchema &amp;gt; Validation" time="0.000046" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept minimal task data" classname="createTaskSchema &amp;gt; Validation" time="0.000022" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject invalid task data" classname="createTaskSchema &amp;gt; Validation" time="0.000035" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid agent creation data" classname="createAgentSchema &amp;gt; Validation" time="0.000018" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept minimal agent data" classname="createAgentSchema &amp;gt; Validation" time="0.000018" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject invalid agent data" classname="createAgentSchema &amp;gt; Validation" time="0.000031" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should accept valid task filters" classname="taskFiltersSchema &amp;gt; Validation" time="0.000029" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should require projectId" classname="taskFiltersSchema &amp;gt; Validation" time="0.000029" file="test/utils/validation.test.ts" assertions="1" />
    <testcase name="should reject invalid filter values" classname="taskFiltersSchema &amp;gt; Validation" time="0.000073" file="test/utils/validation.test.ts" assertions="1" />
  </testsuite>
  <testsuite name="test/mcp/server.test.ts" tests="7" assertions="131" failures="0" skipped="0" time="0.005" hostname="taxitopArm23.local">
    <testcase name="should register all tools" classname="Tool Registration &amp;gt; MCP Server Integration" time="0" file="test/mcp/server.test.ts" assertions="5" />
    <testcase name="should have properly structured tool definitions" classname="Tool Registration &amp;gt; MCP Server Integration" time="0.000025" file="test/mcp/server.test.ts" assertions="105" />
    <testcase name="should execute create_project tool" classname="Tool Execution &amp;gt; MCP Server Integration" time="0.000562" file="test/mcp/server.test.ts" assertions="4" />
    <testcase name="should execute health_check tool" classname="Tool Execution &amp;gt; MCP Server Integration" time="0.000072" file="test/mcp/server.test.ts" assertions="3" />
    <testcase name="should support complete task workflow" classname="End-to-End Workflow &amp;gt; MCP Server Integration" time="0.005353" file="test/mcp/server.test.ts" assertions="10" />
    <testcase name="should handle tool call errors gracefully" classname="Error Handling &amp;gt; MCP Server Integration" time="0.000071" file="test/mcp/server.test.ts" assertions="2" />
    <testcase name="should handle validation errors" classname="Error Handling &amp;gt; MCP Server Integration" time="0.000175" file="test/mcp/server.test.ts" assertions="2" />
  </testsuite>
  <testsuite name="test/storage/FileStorageProvider.test.ts" tests="38" assertions="112" failures="0" skipped="0" time="0.036" hostname="taxitopArm23.local">
    <testcase name="should initialize successfully" classname="Initialization &amp;gt; FileStorageProvider" time="0.000277" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should create data directories" classname="Initialization &amp;gt; FileStorageProvider" time="0.00023" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should handle multiple initializations gracefully" classname="Initialization &amp;gt; FileStorageProvider" time="0" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should create a project successfully" classname="createProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000356" file="test/storage/FileStorageProvider.test.ts" assertions="8" />
    <testcase name="should apply default config values" classname="createProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000226" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should retrieve an existing project" classname="getProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000472" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should return null for non-existent project" classname="getProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.00006" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should update project stats when retrieving" classname="getProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.001858" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should update project properties" classname="updateProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.001912" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should throw error for non-existent project" classname="updateProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000066" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should list active projects by default" classname="listProjects &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000893" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should include closed projects when requested" classname="listProjects &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000961" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should sort projects by creation date" classname="listProjects &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.011705" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should delete a project" classname="deleteProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000419" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should not throw error for non-existent project" classname="deleteProject &amp;gt; Project Operations &amp;gt; FileStorageProvider" time="0.000079" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should create a task type successfully" classname="createTaskType &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000483" file="test/storage/FileStorageProvider.test.ts" assertions="8" />
    <testcase name="should apply project defaults when not specified" classname="createTaskType &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000435" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should retrieve an existing task type" classname="getTaskType &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000464" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should return null for non-existent task type" classname="getTaskType &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000092" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should list task types for a project" classname="listTaskTypes &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000815" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should return empty array for project with no task types" classname="listTaskTypes &amp;gt; Task Type Operations &amp;gt; FileStorageProvider" time="0.000044" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should create a task successfully" classname="createTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.0004" file="test/storage/FileStorageProvider.test.ts" assertions="9" />
    <testcase name="should handle duplicate detection with ignore strategy" classname="createTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.001276" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should handle duplicate detection with fail strategy" classname="createTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.001145" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should assign queued task to agent" classname="assignTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.000834" file="test/storage/FileStorageProvider.test.ts" assertions="7" />
    <testcase name="should return null when no tasks are available" classname="assignTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.000369" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should assign tasks in FIFO order" classname="assignTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.012736" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should complete a running task" classname="completeTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.0015" file="test/storage/FileStorageProvider.test.ts" assertions="7" />
    <testcase name="should fail a task and requeue for retry" classname="failTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.001413" file="test/storage/FileStorageProvider.test.ts" assertions="6" />
    <testcase name="should fail task permanently when retry limit reached" classname="failTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.002016" file="test/storage/FileStorageProvider.test.ts" assertions="3" />
    <testcase name="should respect canRetry parameter" classname="failTask &amp;gt; Task Operations &amp;gt; FileStorageProvider" time="0.001395" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should return empty list when no agents are working" classname="listActiveAgents &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.000094" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should list agents with active task leases" classname="listActiveAgents &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.002461" file="test/storage/FileStorageProvider.test.ts" assertions="10" />
    <testcase name="should return null for agent with no active lease" classname="getAgentStatus &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.000167" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should return status for agent with active lease" classname="getAgentStatus &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.000881" file="test/storage/FileStorageProvider.test.ts" assertions="6" />
    <testcase name="should extend lease for running task" classname="extendLease &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.002323" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
    <testcase name="should throw error for non-running task" classname="extendLease &amp;gt; Lease-based Agent Operations &amp;gt; FileStorageProvider" time="0.00049" file="test/storage/FileStorageProvider.test.ts" assertions="1" />
    <testcase name="should return healthy status" classname="Health Check &amp;gt; FileStorageProvider" time="0" file="test/storage/FileStorageProvider.test.ts" assertions="2" />
  </testsuite>
  <testsuite name="test/http/session-integration.test.ts" tests="10" assertions="16" failures="0" skipped="0" time="31.167" hostname="taxitopArm23.local">
    <testcase name="should persist sessions across multiple server instances" classname="Multi-Pod Session Persistence &amp;gt; Session Integration Tests" time="0.021013" file="test/http/session-integration.test.ts" assertions="3" />
    <testcase name="should handle session updates across server instances" classname="Multi-Pod Session Persistence &amp;gt; Session Integration Tests" time="0.019977" file="test/http/session-integration.test.ts" assertions="2" />
    <testcase name="should handle session logout from any server instance" classname="Multi-Pod Session Persistence &amp;gt; Session Integration Tests" time="0.012855" file="test/http/session-integration.test.ts" assertions="0" />
    <testcase name="should resume session after server restart" classname="Session Resumption Scenarios &amp;gt; Session Integration Tests" time="0.00775" file="test/http/session-integration.test.ts" assertions="2" />
    <testcase name="should handle node reconnection scenario" classname="Session Resumption Scenarios &amp;gt; Session Integration Tests" time="0.011734" file="test/http/session-integration.test.ts" assertions="2" />
    <testcase name="should prevent duplicate sessions across server instances" classname="Session Resumption Scenarios &amp;gt; Session Integration Tests" time="0.012316" file="test/http/session-integration.test.ts" assertions="0" />
    <testcase name="should clean up expired sessions across server instances" classname="Session Cleanup and Management &amp;gt; Session Integration Tests" time="31.021977" file="test/http/session-integration.test.ts" assertions="0" />
    <testcase name="should handle multiple agents with separate sessions" classname="Session Cleanup and Management &amp;gt; Session Integration Tests" time="0.033532" file="test/http/session-integration.test.ts" assertions="2" />
    <testcase name="should handle storage corruption gracefully" classname="Error Handling in Multi-Pod Environment &amp;gt; Session Integration Tests" time="0.017616" file="test/http/session-integration.test.ts" assertions="1" />
    <testcase name="should handle concurrent session operations" classname="Error Handling in Multi-Pod Environment &amp;gt; Session Integration Tests" time="0.014593" file="test/http/session-integration.test.ts" assertions="4" />
  </testsuite>
  <testsuite name="test/http/server.test.ts" tests="31" assertions="41" failures="0" skipped="0" time="0.123" hostname="taxitopArm23.local">
    <testcase name="should return health status" classname="Health Check &amp;gt; HTTP Server" time="0.002751" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should create session successfully" classname="Authentication &amp;gt; HTTP Server" time="0.003278" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should resume existing session" classname="Authentication &amp;gt; HTTP Server" time="0.008955" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should prevent duplicate sessions by default" classname="Authentication &amp;gt; HTTP Server" time="0.006653" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should allow multiple sessions when configured" classname="Authentication &amp;gt; HTTP Server" time="0.005922" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should accept login with agent that has no active lease" classname="Authentication &amp;gt; HTTP Server" time="0.003594" file="test/http/server.test.ts" assertions="3" />
    <testcase name="should reject login with invalid project" classname="Authentication &amp;gt; HTTP Server" time="0.003259" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should logout successfully" classname="Authentication &amp;gt; HTTP Server" time="0.01006" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should reject requests without authorization header" classname="Authentication Middleware &amp;gt; HTTP Server" time="0.001797" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should reject requests with invalid bearer token format" classname="Authentication Middleware &amp;gt; HTTP Server" time="0.002241" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should reject requests with invalid session token" classname="Authentication Middleware &amp;gt; HTTP Server" time="0.002558" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should accept requests with valid session token" classname="Authentication Middleware &amp;gt; HTTP Server" time="0.004122" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should provide session info in authenticated requests" classname="Authentication Middleware &amp;gt; HTTP Server" time="0.003297" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should list projects" classname="Project API &amp;gt; HTTP Server" time="0.004315" file="test/http/server.test.ts" assertions="3" />
    <testcase name="should create new project" classname="Project API &amp;gt; HTTP Server" time="0.005182" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should get project by ID" classname="Project API &amp;gt; HTTP Server" time="0.004163" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should update project" classname="Project API &amp;gt; HTTP Server" time="0.004746" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should get project stats" classname="Project API &amp;gt; HTTP Server" time="0.004303" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should return 404 for nonexistent project" classname="Project API &amp;gt; HTTP Server" time="0.003367" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should list active agents for project" classname="Agent API &amp;gt; HTTP Server" time="0.00383" file="test/http/server.test.ts" assertions="4" />
    <testcase name="should reject agent creation in lease-based model" classname="Agent API &amp;gt; HTTP Server" time="0.00391" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should fail to get agent status due to missing projectId parameter" classname="Agent API &amp;gt; HTTP Server" time="0.00382" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should handle 404 for unknown routes" classname="Error Handling &amp;gt; HTTP Server" time="0.003376" file="test/http/server.test.ts" assertions="0" />
    <testcase name="should handle validation errors" classname="Error Handling &amp;gt; HTTP Server" time="0.005309" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should include correlation ID in error responses" classname="Error Handling &amp;gt; HTTP Server" time="0.002944" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should return proper error structure" classname="Error Handling &amp;gt; HTTP Server" time="0.003531" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should update session data" classname="Session Management Advanced &amp;gt; HTTP Server" time="0.010609" file="test/http/server.test.ts" assertions="3" />
    <testcase name="should handle session cleanup on expired sessions" classname="Session Management Advanced &amp;gt; HTTP Server" time="0.003029" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should apply rate limiting to API endpoints" classname="Rate Limiting &amp;gt; HTTP Server" time="0.007667" file="test/http/server.test.ts" assertions="1" />
    <testcase name="should include security headers" classname="CORS and Security Headers &amp;gt; HTTP Server" time="0.002721" file="test/http/server.test.ts" assertions="2" />
    <testcase name="should handle CORS preflight requests" classname="CORS and Security Headers &amp;gt; HTTP Server" time="0.003141" file="test/http/server.test.ts" assertions="0" />
  </testsuite>
  <testsuite name="test/http/http-entry.test.ts" tests="6" assertions="8" failures="0" skipped="0" time="0.009" hostname="taxitopArm23.local">
    <testcase name="should export TaskDriverHttpServer class" classname="HTTP Entry Point" time="0.000035" file="test/http/http-entry.test.ts" assertions="2" />
    <testcase name="should be able to create server instance with config" classname="HTTP Entry Point" time="0.001015" file="test/http/http-entry.test.ts" assertions="1" />
    <testcase name="should handle server lifecycle correctly" classname="HTTP Entry Point" time="0.004825" file="test/http/http-entry.test.ts" assertions="3" />
    <testcase name="should handle initialization errors gracefully" classname="HTTP Entry Point" time="0.000938" file="test/http/http-entry.test.ts" assertions="1" />
    <testcase name="should validate configuration requirements" classname="HTTP Entry Point" time="0.000414" file="test/http/http-entry.test.ts" assertions="1" />
    <testcase name="should handle multiple start/stop cycles" classname="HTTP Entry Point" time="0.00477" file="test/http/http-entry.test.ts" assertions="0" />
  </testsuite>
  <testsuite name="test/commands/types.test.ts" tests="8" assertions="15" failures="0" skipped="0" time="0" hostname="taxitopArm23.local">
    <testcase name="should infer string type" classname="Parameter Type Inference &amp;gt; Command Types" time="0" file="test/commands/types.test.ts" assertions="1" />
    <testcase name="should infer number type" classname="Parameter Type Inference &amp;gt; Command Types" time="0.000011" file="test/commands/types.test.ts" assertions="1" />
    <testcase name="should infer boolean type" classname="Parameter Type Inference &amp;gt; Command Types" time="0.000005" file="test/commands/types.test.ts" assertions="1" />
    <testcase name="should infer array type" classname="Parameter Type Inference &amp;gt; Command Types" time="0.000015" file="test/commands/types.test.ts" assertions="1" />
    <testcase name="should infer choice type from string choices" classname="Parameter Type Inference &amp;gt; Command Types" time="0" file="test/commands/types.test.ts" assertions="1" />
    <testcase name="should handle optional parameters" classname="Parameter Type Inference &amp;gt; Command Types" time="0.000009" file="test/commands/types.test.ts" assertions="2" />
    <testcase name="should handle multiple parameters" classname="Parameter Type Inference &amp;gt; Command Types" time="0.000026" file="test/commands/types.test.ts" assertions="3" />
    <testcase name="should properly structure a command definition" classname="Command Definition Structure &amp;gt; Command Types" time="0.000028" file="test/commands/types.test.ts" assertions="5" />
  </testsuite>
  <testsuite name="test/commands/formatters.test.ts" tests="9" assertions="35" failures="0" skipped="0" time="0.007" hostname="taxitopArm23.local">
    <testcase name="should format successful result as JSON" classname="JSON Format &amp;gt; Command Formatters" time="0" file="test/commands/formatters.test.ts" assertions="2" />
    <testcase name="should format error result as JSON with exit code 1" classname="JSON Format &amp;gt; Command Formatters" time="0.000022" file="test/commands/formatters.test.ts" assertions="2" />
    <testcase name="should format project creation result" classname="Human Format &amp;gt; Command Formatters" time="0.007627" file="test/commands/formatters.test.ts" assertions="6" />
    <testcase name="should format project list result" classname="Human Format &amp;gt; Command Formatters" time="0.000248" file="test/commands/formatters.test.ts" assertions="6" />
    <testcase name="should format task list result" classname="Human Format &amp;gt; Command Formatters" time="0.000151" file="test/commands/formatters.test.ts" assertions="6" />
    <testcase name="should format health check result" classname="Human Format &amp;gt; Command Formatters" time="0.000047" file="test/commands/formatters.test.ts" assertions="5" />
    <testcase name="should format error results" classname="Human Format &amp;gt; Command Formatters" time="0.000012" file="test/commands/formatters.test.ts" assertions="3" />
    <testcase name="should handle empty results" classname="Human Format &amp;gt; Command Formatters" time="0.000012" file="test/commands/formatters.test.ts" assertions="2" />
    <testcase name="should default to human format when format is not specified" classname="Default Format &amp;gt; Command Formatters" time="0.000021" file="test/commands/formatters.test.ts" assertions="3" />
  </testsuite>
  <testsuite name="test/services/LeaseService.test.ts" tests="8" assertions="28" failures="0" skipped="0" time="0.008" hostname="taxitopArm23.local">
    <testcase name="should reclaim expired tasks" classname="cleanupExpiredLeases &amp;gt; LeaseService" time="0.003934" file="test/services/LeaseService.test.ts" assertions="8" />
    <testcase name="should not reclaim non-expired tasks" classname="cleanupExpiredLeases &amp;gt; LeaseService" time="0.001988" file="test/services/LeaseService.test.ts" assertions="8" />
    <testcase name="should handle projects with no running tasks" classname="cleanupExpiredLeases &amp;gt; LeaseService" time="0.00009" file="test/services/LeaseService.test.ts" assertions="2" />
    <testcase name="should extend lease for running task" classname="extendTaskLease &amp;gt; LeaseService" time="0.002333" file="test/services/LeaseService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task" classname="extendTaskLease &amp;gt; LeaseService" time="0.000096" file="test/services/LeaseService.test.ts" assertions="1" />
    <testcase name="should throw error for non-running task" classname="extendTaskLease &amp;gt; LeaseService" time="0.000951" file="test/services/LeaseService.test.ts" assertions="1" />
    <testcase name="should return stats for project with tasks" classname="getLeaseStats &amp;gt; LeaseService" time="0.002611" file="test/services/LeaseService.test.ts" assertions="4" />
    <testcase name="should return empty stats for project with no tasks" classname="getLeaseStats &amp;gt; LeaseService" time="0.000074" file="test/services/LeaseService.test.ts" assertions="3" />
  </testsuite>
  <testsuite name="test/services/SessionService.test.ts" tests="30" assertions="57" failures="0" skipped="0" time="1.212" hostname="taxitopArm23.local">
    <testcase name="should create session successfully" classname="Session Creation &amp;gt; SessionService" time="0.002632" file="test/services/SessionService.test.ts" assertions="5" />
    <testcase name="should create session with custom TTL" classname="Session Creation &amp;gt; SessionService" time="0.002262" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should create session with custom data" classname="Session Creation &amp;gt; SessionService" time="0.002317" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should allow session creation for agent without active lease" classname="Session Creation &amp;gt; SessionService" time="0.000563" file="test/services/SessionService.test.ts" assertions="4" />
    <testcase name="should reject session creation for nonexistent project" classname="Session Creation &amp;gt; SessionService" time="0.000074" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should resume existing session" classname="Session Resumption &amp;gt; SessionService" time="0.015101" file="test/services/SessionService.test.ts" assertions="3" />
    <testcase name="should resume most recent session when multiple exist" classname="Session Resumption &amp;gt; SessionService" time="0.026258" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should create new session when no existing sessions to resume" classname="Session Resumption &amp;gt; SessionService" time="0.002126" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should clean up existing sessions by default" classname="Duplicate Session Prevention &amp;gt; SessionService" time="0.003728" file="test/services/SessionService.test.ts" assertions="4" />
    <testcase name="should allow multiple sessions when configured" classname="Duplicate Session Prevention &amp;gt; SessionService" time="0.003646" file="test/services/SessionService.test.ts" assertions="4" />
    <testcase name="should authenticate valid session token" classname="Session Authentication &amp;gt; SessionService" time="0.002465" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should reject invalid session token" classname="Session Authentication &amp;gt; SessionService" time="0.000075" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should reject malformed session token" classname="Session Authentication &amp;gt; SessionService" time="0.000048" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should reject session token with invalid signature" classname="Session Authentication &amp;gt; SessionService" time="0.002541" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should update last accessed time on authentication" classname="Session Authentication &amp;gt; SessionService" time="0.014017" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should validate session with agent and project info" classname="Session Validation &amp;gt; SessionService" time="0.002826" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should return null for invalid session" classname="Session Validation &amp;gt; SessionService" time="0.000086" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should handle session validation when agent lease expires" classname="Session Validation &amp;gt; SessionService" time="0.004586" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should update session data" classname="Session Data Management &amp;gt; SessionService" time="0.00306" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should extend session expiration" classname="Session Data Management &amp;gt; SessionService" time="0.003026" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should reject extension of nonexistent session" classname="Session Data Management &amp;gt; SessionService" time="0.000131" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should destroy session" classname="Session Cleanup &amp;gt; SessionService" time="0.002467" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should clean up sessions for specific agent" classname="Session Cleanup &amp;gt; SessionService" time="0.003425" file="test/services/SessionService.test.ts" assertions="3" />
    <testcase name="should find active sessions for agent" classname="Session Cleanup &amp;gt; SessionService" time="0.002449" file="test/services/SessionService.test.ts" assertions="3" />
    <testcase name="should clean up expired sessions" classname="Session Cleanup &amp;gt; SessionService" time="1.105499" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should generate unique tokens for different sessions" classname="Token Security &amp;gt; SessionService" time="0.005482" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should include timestamp in token" classname="Token Security &amp;gt; SessionService" time="0.00287" file="test/services/SessionService.test.ts" assertions="2" />
    <testcase name="should include random component in token" classname="Token Security &amp;gt; SessionService" time="0.00452" file="test/services/SessionService.test.ts" assertions="3" />
    <testcase name="should persist sessions across service restarts" classname="Storage Persistence &amp;gt; SessionService" time="0.00275" file="test/services/SessionService.test.ts" assertions="1" />
    <testcase name="should maintain session data across service restarts" classname="Storage Persistence &amp;gt; SessionService" time="0.002311" file="test/services/SessionService.test.ts" assertions="1" />
  </testsuite>
  <testsuite name="test/services/ProjectService.test.ts" tests="19" assertions="37" failures="0" skipped="0" time="0.003" hostname="taxitopArm23.local">
    <testcase name="should create a project with valid input" classname="createProject &amp;gt; ProjectService" time="0.000387" file="test/services/ProjectService.test.ts" assertions="8" />
    <testcase name="should create project with custom config" classname="createProject &amp;gt; ProjectService" time="0.000366" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should throw validation error for invalid input" classname="createProject &amp;gt; ProjectService" time="0.000126" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should throw error for duplicate project names" classname="createProject &amp;gt; ProjectService" time="0.00152" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should retrieve existing project" classname="getProject &amp;gt; ProjectService" time="0.000622" file="test/services/ProjectService.test.ts" assertions="3" />
    <testcase name="should return null for non-existent project" classname="getProject &amp;gt; ProjectService" time="0.000063" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should update project description" classname="updateProject &amp;gt; ProjectService" time="0.000736" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should update project config" classname="updateProject &amp;gt; ProjectService" time="0.000708" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should update project status" classname="updateProject &amp;gt; ProjectService" time="0.000766" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent project" classname="updateProject &amp;gt; ProjectService" time="0.000065" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should throw error for duplicate name during update" classname="updateProject &amp;gt; ProjectService" time="0.000925" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should list active projects by default" classname="listProjects &amp;gt; ProjectService" time="0.000198" file="test/services/ProjectService.test.ts" assertions="4" />
    <testcase name="should list all projects when includeClosed is true" classname="listProjects &amp;gt; ProjectService" time="0.000215" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should return empty array when no projects exist" classname="listProjects &amp;gt; ProjectService" time="0.001452" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should delete existing project" classname="deleteProject &amp;gt; ProjectService" time="0.001532" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should throw error when deleting non-existent project" classname="deleteProject &amp;gt; ProjectService" time="0.000069" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should pass validation for existing active project" classname="validateProjectAccess &amp;gt; ProjectService" time="0.000307" file="test/services/ProjectService.test.ts" assertions="2" />
    <testcase name="should throw error for non-existent project" classname="validateProjectAccess &amp;gt; ProjectService" time="0.000031" file="test/services/ProjectService.test.ts" assertions="1" />
    <testcase name="should throw error for closed project" classname="validateProjectAccess &amp;gt; ProjectService" time="0.000894" file="test/services/ProjectService.test.ts" assertions="1" />
  </testsuite>
  <testsuite name="test/services/TaskTypeService.test.ts" tests="19" assertions="47" failures="0" skipped="0" time="0.006" hostname="taxitopArm23.local">
    <testcase name="should create a task type with minimal input" classname="createTaskType &amp;gt; TaskTypeService" time="0.000911" file="test/services/TaskTypeService.test.ts" assertions="10" />
    <testcase name="should create task type with template and variables" classname="createTaskType &amp;gt; TaskTypeService" time="0.000915" file="test/services/TaskTypeService.test.ts" assertions="2" />
    <testcase name="should auto-detect variables from template" classname="createTaskType &amp;gt; TaskTypeService" time="0.00069" file="test/services/TaskTypeService.test.ts" assertions="2" />
    <testcase name="should create task type with custom configuration" classname="createTaskType &amp;gt; TaskTypeService" time="0.000774" file="test/services/TaskTypeService.test.ts" assertions="5" />
    <testcase name="should throw validation error for invalid input" classname="createTaskType &amp;gt; TaskTypeService" time="0.000112" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should throw validation error for invalid project ID format" classname="createTaskType &amp;gt; TaskTypeService" time="0.00007" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should throw error for duplicate task type name in project" classname="createTaskType &amp;gt; TaskTypeService" time="0.001291" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should allow same task type name in different projects" classname="createTaskType &amp;gt; TaskTypeService" time="0.001706" file="test/services/TaskTypeService.test.ts" assertions="4" />
    <testcase name="should retrieve existing task type" classname="getTaskType &amp;gt; TaskTypeService" time="0.000692" file="test/services/TaskTypeService.test.ts" assertions="4" />
    <testcase name="should return null for non-existent task type" classname="getTaskType &amp;gt; TaskTypeService" time="0.000098" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should update task type template" classname="updateTaskType &amp;gt; TaskTypeService" time="0.00115" file="test/services/TaskTypeService.test.ts" assertions="3" />
    <testcase name="should update task type configuration" classname="updateTaskType &amp;gt; TaskTypeService" time="0.000796" file="test/services/TaskTypeService.test.ts" assertions="3" />
    <testcase name="should throw error for non-existent task type" classname="updateTaskType &amp;gt; TaskTypeService" time="0.000219" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should throw error for duplicate name within project" classname="updateTaskType &amp;gt; TaskTypeService" time="0.001625" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should list task types for specific project" classname="listTaskTypes &amp;gt; TaskTypeService" time="0.000361" file="test/services/TaskTypeService.test.ts" assertions="4" />
    <testcase name="should return empty array for project with no task types" classname="listTaskTypes &amp;gt; TaskTypeService" time="0.000578" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent project" classname="listTaskTypes &amp;gt; TaskTypeService" time="0.000113" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should delete existing task type" classname="deleteTaskType &amp;gt; TaskTypeService" time="0.002158" file="test/services/TaskTypeService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task type" classname="deleteTaskType &amp;gt; TaskTypeService" time="0.000124" file="test/services/TaskTypeService.test.ts" assertions="1" />
  </testsuite>
  <testsuite name="test/services/TaskService.test.ts" tests="29" assertions="63" failures="0" skipped="0" time="0.011" hostname="taxitopArm23.local">
    <testcase name="should create a task with minimal input" classname="createTask &amp;gt; TaskService" time="0.001055" file="test/services/TaskService.test.ts" assertions="9" />
    <testcase name="should create task with variables" classname="createTask &amp;gt; TaskService" time="0.001076" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should create task with custom ID" classname="createTask &amp;gt; TaskService" time="0.001076" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw validation error for missing required template variables" classname="createTask &amp;gt; TaskService" time="0.000349" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw validation error for invalid project ID format" classname="createTask &amp;gt; TaskService" time="0.000161" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw validation error for invalid task type ID format" classname="createTask &amp;gt; TaskService" time="0.000088" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should handle duplicate detection with fail strategy" classname="createTask &amp;gt; TaskService" time="0.002153" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should handle duplicate detection with ignore strategy" classname="createTask &amp;gt; TaskService" time="0.002489" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should retrieve existing task" classname="getTask &amp;gt; TaskService" time="0.000957" file="test/services/TaskService.test.ts" assertions="3" />
    <testcase name="should return null for non-existent task" classname="getTask &amp;gt; TaskService" time="0.000148" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should list all tasks for project" classname="listTasks &amp;gt; TaskService" time="0.000336" file="test/services/TaskService.test.ts" assertions="2" />
    <testcase name="should filter tasks by status" classname="listTasks &amp;gt; TaskService" time="0.00081" file="test/services/TaskService.test.ts" assertions="4" />
    <testcase name="should filter tasks by assigned agent" classname="listTasks &amp;gt; TaskService" time="0.00038" file="test/services/TaskService.test.ts" assertions="2" />
    <testcase name="should filter tasks by type" classname="listTasks &amp;gt; TaskService" time="0.000331" file="test/services/TaskService.test.ts" assertions="2" />
    <testcase name="should apply pagination" classname="listTasks &amp;gt; TaskService" time="0.000592" file="test/services/TaskService.test.ts" assertions="2" />
    <testcase name="should throw error for non-existent project" classname="listTasks &amp;gt; TaskService" time="0.000131" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should assign next queued task to agent via AgentService" classname="task assignment through AgentService &amp;gt; TaskService" time="0.000763" file="test/services/TaskService.test.ts" assertions="5" />
    <testcase name="should return null when no tasks available" classname="task assignment through AgentService &amp;gt; TaskService" time="0.002607" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should cleanup expired leases before assignment" classname="task assignment through AgentService &amp;gt; TaskService" time="0.002627" file="test/services/TaskService.test.ts" assertions="8" />
    <testcase name="should validate correct task assignment" classname="validateTaskAssignment &amp;gt; TaskService" time="0.000177" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task" classname="validateTaskAssignment &amp;gt; TaskService" time="0.00018" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw error for unassigned task" classname="validateTaskAssignment &amp;gt; TaskService" time="0.000749" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should throw error for task assigned to different agent" classname="validateTaskAssignment &amp;gt; TaskService" time="0.000082" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should extend task lease" classname="extendTaskLease &amp;gt; TaskService" time="0.000791" file="test/services/TaskService.test.ts" assertions="0" />
    <testcase name="should throw error for non-existent task" classname="extendTaskLease &amp;gt; TaskService" time="0.000081" file="test/services/TaskService.test.ts" assertions="1" />
    <testcase name="should return correct lease statistics" classname="getLeaseStats &amp;gt; TaskService" time="0.000139" file="test/services/TaskService.test.ts" assertions="4" />
    <testcase name="should return empty stats for project with no tasks" classname="getLeaseStats &amp;gt; TaskService" time="0.000469" file="test/services/TaskService.test.ts" assertions="3" />
    <testcase name="should cleanup expired leases" classname="cleanupExpiredLeases &amp;gt; TaskService" time="0.000575" file="test/services/TaskService.test.ts" assertions="2" />
    <testcase name="should return zero counts for project with no expired leases" classname="cleanupExpiredLeases &amp;gt; TaskService" time="0.000388" file="test/services/TaskService.test.ts" assertions="2" />
  </testsuite>
  <testsuite name="test/services/AgentService.test.ts" tests="32" assertions="77" failures="0" skipped="0" time="0.036" hostname="taxitopArm23.local">
    <testcase name="should get next task with provided agent name" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.000819" file="test/services/AgentService.test.ts" assertions="7" />
    <testcase name="should get next task with auto-generated agent name" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.000691" file="test/services/AgentService.test.ts" assertions="7" />
    <testcase name="should return null task when no tasks available" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.002177" file="test/services/AgentService.test.ts" assertions="2" />
    <testcase name="should resume existing task for agent with active lease" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.001195" file="test/services/AgentService.test.ts" assertions="2" />
    <testcase name="should throw error for non-existent project" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.000069" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should assign different tasks to different agents" classname="getNextTask &amp;gt; AgentService (Lease-based)" time="0.001425" file="test/services/AgentService.test.ts" assertions="5" />
    <testcase name="should complete task successfully" classname="completeTask &amp;gt; AgentService (Lease-based)" time="0.000895" file="test/services/AgentService.test.ts" assertions="5" />
    <testcase name="should complete task with minimal result" classname="completeTask &amp;gt; AgentService (Lease-based)" time="0.000823" file="test/services/AgentService.test.ts" assertions="2" />
    <testcase name="should throw error for task not assigned to agent" classname="completeTask &amp;gt; AgentService (Lease-based)" time="0.000568" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task" classname="completeTask &amp;gt; AgentService (Lease-based)" time="0.000395" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent project" classname="completeTask &amp;gt; AgentService (Lease-based)" time="0.000065" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should fail task with retry" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.000789" file="test/services/AgentService.test.ts" assertions="4" />
    <testcase name="should fail task without retry" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.000919" file="test/services/AgentService.test.ts" assertions="5" />
    <testcase name="should use default canRetry=true when not specified" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.000752" file="test/services/AgentService.test.ts" assertions="2" />
    <testcase name="should throw error for task not assigned to agent" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.00187" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.000401" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent project" classname="failTask &amp;gt; AgentService (Lease-based)" time="0.000062" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should list active agents with leased tasks" classname="listActiveAgents &amp;gt; AgentService (Lease-based)" time="0.001522" file="test/services/AgentService.test.ts" assertions="6" />
    <testcase name="should return empty array when no agents are active" classname="listActiveAgents &amp;gt; AgentService (Lease-based)" time="0.000301" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should not include agents after task completion" classname="listActiveAgents &amp;gt; AgentService (Lease-based)" time="0.002891" file="test/services/AgentService.test.ts" assertions="3" />
    <testcase name="should throw error for non-existent project" classname="listActiveAgents &amp;gt; AgentService (Lease-based)" time="0.000077" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should get status for agent with active lease" classname="getAgentStatus &amp;gt; AgentService (Lease-based)" time="0.001029" file="test/services/AgentService.test.ts" assertions="6" />
    <testcase name="should return null for agent without active lease" classname="getAgentStatus &amp;gt; AgentService (Lease-based)" time="0.000298" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should return null after task completion" classname="getAgentStatus &amp;gt; AgentService (Lease-based)" time="0.001509" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent project" classname="getAgentStatus &amp;gt; AgentService (Lease-based)" time="0.000107" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should extend task lease successfully" classname="extendTaskLease &amp;gt; AgentService (Lease-based)" time="0.000977" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for task not assigned to agent" classname="extendTaskLease &amp;gt; AgentService (Lease-based)" time="0.000132" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for non-existent task" classname="extendTaskLease &amp;gt; AgentService (Lease-based)" time="0.000091" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should throw error for completed task" classname="extendTaskLease &amp;gt; AgentService (Lease-based)" time="0.00081" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should work with different extension durations" classname="extendTaskLease &amp;gt; AgentService (Lease-based)" time="0.001052" file="test/services/AgentService.test.ts" assertions="1" />
    <testcase name="should handle concurrent task assignment properly" classname="edge cases and error handling &amp;gt; AgentService (Lease-based)" time="0.025832" file="test/services/AgentService.test.ts" assertions="2" />
    <testcase name="should handle project validation correctly" classname="edge cases and error handling &amp;gt; AgentService (Lease-based)" time="0.000114" file="test/services/AgentService.test.ts" assertions="2" />
  </testsuite>
</testsuites>
